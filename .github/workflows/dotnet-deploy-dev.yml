name: Dev - Build and Deploy

on:
 workflow_dispatch:
 push:
   branches:
     - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOTNET_CORE_VERSION: 6.0.x
      TERRAFORM_MODULE_VERSION: 6.0.3
      SOLUTION_PATH: ./src/Airslip.Analytics.Core.sln
      FUNCTION_APP_PATH: ./src/Airslip.Analytics.Processor
      CONTEXT_PATH: ./src/Airslip.Analytics.Services.SqlServer
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Add nuget feed
      run: |
        dotnet nuget add source --username ${{ secrets.PACKAGE_USER }} --password ${{ secrets.PACKAGE_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/airslip-ltd/index.json"
        nuget sources add -name "github" -Source "https://nuget.pkg.github.com/airslip-ltd/index.json" -UserName ${{ secrets.PACKAGE_USER }} -Password ${{ secrets.PACKAGE_TOKEN }} -StorePasswordInClearTex
        
    - name: Install Terraform Modules
      run: nuget install Airslip.Terraform.Modules -Version ${{ env.TERRAFORM_MODULE_VERSION }} -OutputDirectory ./env/tf_modules -x

    - name: Build
      run: dotnet build ${{ env.SOLUTION_PATH }}

    - name: Publish the Processor Function App
      run: dotnet publish ${{ env.FUNCTION_APP_PATH }} -c Release -o ProcessorApp

    - name: Upload DbContext Artifact
      uses: actions/upload-artifact@v2.2.2
      with:
        name: DbContext
        path: ${{ env.CONTEXT_PATH }}
        if-no-files-found: error

    - name: Upload Processor Artifact
      uses: actions/upload-artifact@v2.2.2
      with:
        name: ProcessorApp
        path: ./ProcessorApp/**
        if-no-files-found: error

    - name: Upload Environment Artifact
      uses: actions/upload-artifact@v2.2.2
      with:
        name: Environment
        path: ./env/**
        if-no-files-found: error

  build-environment:
    needs: build
    runs-on: ubuntu-latest
    environment: Development
    env:
      ENVIRONMENT_NAME_SHORT: dev
    steps:
    - name: Download Environment Artifact
      uses: actions/download-artifact@v2.0.8
      with:
        name: Environment
        path: ./env

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["./env/variables/secrets.tfvars"]'
      env:
        SQL_ADMIN_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
        SQL_ADMIN_LOGIN: ${{ secrets.SQL_ADMIN_LOGIN }}

    - name: Terraform Update
      id: "terraform_update"
      env:
        ARM_CLIENT_ID: ${{ secrets.NON_PROD_ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.NON_PROD_ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.NON_PROD_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.NON_PROD_ARM_TENANT_ID }}
      run: |
        terraform init -backend-config=variables/${{ env.ENVIRONMENT_NAME_SHORT }}/backend.tfvars
        terraform plan -var-file=variables/${{ env.ENVIRONMENT_NAME_SHORT }}/variables.tfvars -var-file=variables/secrets.tfvars -out=terraform.tfplan
        terraform apply terraform.tfplan
        terraform output -json >> environment.json
      working-directory: ./env

    - name: Upload Environment Settings Artifact
      uses: actions/upload-artifact@v2.2.2
      with:
        name: Settings
        path: ./env/environment.json
        if-no-files-found: error

  deploy-processor-app:
    needs: build-environment
    runs-on: ubuntu-latest
    environment: Development
    env:
      ENVIRONMENT_NAME: Development
      ENVIRONMENT_NAME_SHORT: dev
      PUBLISH_PATH: ./
      APPSERVICE_NAME: analytics-core-api

    steps:
    - name: Download Processor Artifact
      uses: actions/download-artifact@v2.0.8
      with:
        name: ProcessorApp
        path: ./ProcessorApp

    - name: Download Environment Settings Artifact
      uses: actions/download-artifact@v2.0.8
      with:
        name: Settings
        path: ./

    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["${{ env.PUBLISH_PATH }}/**/*.json"]'
      env:
        LOGZ_IO_AUTH_TOKEN: ${{ secrets.LOGZ_IO_AUTH_TOKEN }}
        LOGZ_IO_LOG_LEVEL: Debug
        LOGZ_IO_ENVIRONMENT: ${{ env.ENVIRONMENT_NAME }}
        LOGZ_IO_SERVICE_NAME: ${{ env.APPSERVICE_NAME }}
        LOGZ_IO_HOSTING_NAME: Azure

    - name: Extract Environment Settings
      id: "env_settings"
      run: |
        content=`cat ./environment.json`
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        echo "::set-output name=envJson::$content"

    - name: Get AppService publish profile
      id: publishprofile_processor
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_PROD_DEPLOY }}
      with:
        resourceGroupName: ${{ fromJson(steps.env_settings.outputs.envJson).resource_group_name.value }}
        appName: ${{ fromJson(steps.env_settings.outputs.envJson).function_app_names.value[0] }}

    - name: 'Deploy Processor Function App'
      uses: Azure/functions-action@v1
      id: function_app_processor
      with:
        app-name: ${{ fromJson(steps.env_settings.outputs.envJson).function_app_names.value[0] }}
        package: ./ProcessorApp
        publish-profile: ${{ steps.publishprofile_processor.outputs.profile }}

  update-database:
    needs: build-environment
    runs-on: ubuntu-latest
    environment: Development
    env:
      DOTNET_CORE_VERSION: 6.0.x
      CONTEXT_PATH: ./src

    steps:
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

    - name: Dotnet tool install
      run: dotnet tool install --global dotnet-ef

    - name: Download DbContext Artifact
      uses: actions/download-artifact@v2.0.8
      with:
        name: DbContext
        path: ${{ env.CONTEXT_PATH }}

    - name: Download Environment Settings Artifact
      uses: actions/download-artifact@v2.0.8
      with:
        name: Settings
        path: ./

    - name: Extract Environment Settings
      id: "env_settings"
      run: |
        content=`cat ./environment.json`
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        echo "::set-output name=envJson::$content"

    - name: Write Outputs
      run: |
        echo "${{ fromJson(steps.env_settings.outputs.envJson).database_connection_string.value }}"

    - name: Migrate Database
      run: |
        dotnet ef database update --no-build --connection "${{ fromJson(steps.env_settings.outputs.envJson).database_connection_string.value }}"
      working-directory: ${{ env.CONTEXT_PATH }}
