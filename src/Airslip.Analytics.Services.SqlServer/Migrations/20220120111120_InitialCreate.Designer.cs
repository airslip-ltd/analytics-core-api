// <auto-generated />
using System;
using Airslip.Analytics.Services.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airslip.Analytics.Services.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerContext))]
    [Migration("20220120111120_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Bank", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("EnvironmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Banks_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("InstitutionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastCardDigits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_BankAccounts_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("BalanceStatus")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountBalances_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("BankAccountBalances", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceCreditLine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountBalanceDetailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("BalanceStatus")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountBalanceDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreditLineType")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountBalanceCreditLines_Id");

                    b.HasIndex("BankAccountBalanceDetailId");

                    b.ToTable("BankAccountBalanceCreditLines", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountBalanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("BalanceStatus")
                        .HasColumnType("int");

                    b.Property<int>("BalanceType")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountBalanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CreditLineIncluded")
                        .HasColumnType("bit");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountBalanceDetails_Id");

                    b.HasIndex("BankAccountBalanceId");

                    b.ToTable("BankAccountBalanceDetails", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceSnapshot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountBalanceSnapshots_Id");

                    b.ToTable("BankAccountBalanceSnapshots", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceSummary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("dbo.getId()");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Movement")
                        .HasColumnType("float");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountBalanceSummaries_Id");

                    b.ToTable("BankAccountBalanceSummaries", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankBusinessBalance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("dbo.getId()");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Movement")
                        .HasColumnType("float");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_BankBusinessBalances_Id");

                    b.ToTable("BankBusinessBalances", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankBusinessBalanceSnapshot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_BankBusinessBalanceSnapshots_Id");

                    b.ToTable("BankBusinessBalanceSnapshots", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankCountryCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankCountryCode");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankSyncRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("FromDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastCardDigits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordCount")
                        .HasColumnType("int");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("int");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TracingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsageType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_BankSyncRequests_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("BankSyncRequests", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("AuthorisedDate")
                        .HasColumnType("bigint");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CapturedDate")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("IsoFamilyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastCardDigits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProprietaryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_BankTransactions_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("BankTransactions", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.CountryCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_CountryCodes_Id");

                    b.ToTable("CountryCodes", (string)null);
                });

            modelBuilder.Entity("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_AuditInformation_Id");

                    b.ToTable("AuditInformation", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Bank", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccount", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalance", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceCreditLine", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.BankAccountBalanceDetail", null)
                        .WithMany("CreditLines")
                        .HasForeignKey("BankAccountBalanceDetailId");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceDetail", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.BankAccountBalance", null)
                        .WithMany("Details")
                        .HasForeignKey("BankAccountBalanceId");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankCountryCode", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.Bank", null)
                        .WithMany("CountryCodes")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankSyncRequest", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankTransaction", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Bank", b =>
                {
                    b.Navigation("CountryCodes");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalance", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceDetail", b =>
                {
                    b.Navigation("CreditLines");
                });
#pragma warning restore 612, 618
        }
    }
}
