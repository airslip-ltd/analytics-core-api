// <auto-generated />
using System;
using Airslip.Analytics.Services.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airslip.Analytics.Services.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerContext))]
    [Migration("20220425082137_CountryCodes")]
    partial class CountryCodes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Bank", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<int>("EnvironmentType")
                        .HasColumnType("int");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar (50)");

                    b.HasKey("Id")
                        .HasName("PK_Banks_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("BalanceStatus")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar (5)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountBalances_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("BankAccountBalances", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceSnapshot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar (5)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IntegrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountBalanceSnapshots_Id");

                    b.HasIndex("EntityId", "AirslipUserType", "AccountType");

                    b.HasIndex("EntityId", "AirslipUserType", "IntegrationId", "UpdatedOn", "TimeStamp", "AccountType", "Currency");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("EntityId", "AirslipUserType", "IntegrationId", "UpdatedOn", "TimeStamp", "AccountType", "Currency"), new[] { "Balance" });

                    b.ToTable("BankAccountBalanceSnapshots", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalanceSummary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("dbo.getId()");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar (5)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IntegrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Movement")
                        .HasColumnType("float");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountBalanceSummaries_Id");

                    b.ToTable("BankAccountBalanceSummaries", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountMetricSnapshot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("dbo.getId()");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<int>("CreditCount")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DebitCount")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IntegrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("MetricDate")
                        .HasColumnType("date");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<long>("TotalCredit")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDebit")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalTransaction")
                        .HasColumnType("bigint");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_BankAccountMetricSnapshots_Id");

                    b.HasIndex("EntityId", "AirslipUserType", "Day", "Month", "Year", "IntegrationId");

                    b.ToTable("BankAccountMetricSnapshots", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankBusinessBalance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("dbo.getId()");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar (5)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Movement")
                        .HasColumnType("float");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_BankBusinessBalances_Id");

                    b.HasIndex("EntityId", "AirslipUserType", "AccountType", "Currency");

                    b.ToTable("BankBusinessBalances", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankBusinessBalanceSnapshot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar (5)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_BankBusinessBalanceSnapshots_Id");

                    b.ToTable("BankBusinessBalanceSnapshots", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankCountryCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id", "BankId");

                    b.HasIndex("BankId");

                    b.ToTable("BankCountryCode");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankSyncRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("FromDate")
                        .IsRequired()
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("IntegrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastCardDigits")
                        .HasColumnType("nvarchar (20)");

                    b.Property<int>("RecordCount")
                        .HasColumnType("int");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("int");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TracingId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsageType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_BankSyncRequests_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("BankSyncRequests", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar (50)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("AuthorisedDate")
                        .HasColumnType("bigint");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CapturedDate")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar (5)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar (150)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar (100)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IsoFamilyCode")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("LastCardDigits")
                        .HasColumnType("nvarchar (20)");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("ProprietaryCode")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar (50)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionHash")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionIdentifier")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_BankTransactions_Id");

                    b.HasIndex("AuditInformationId")
                        .IsUnique()
                        .HasFilter("[AuditInformationId] IS NOT NULL");

                    b.HasIndex("EntityId", "AirslipUserType");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("EntityId", "AirslipUserType"), new[] { "BankId" });

                    b.HasIndex("AirslipUserType", "EntityId", "Day", "Month", "Year");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("AirslipUserType", "EntityId", "Day", "Month", "Year"), new[] { "IntegrationId", "Amount", "BankId" });

                    b.ToTable("BankTransactions", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.CountryCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode3Characters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultCulture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_CountryCodes_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("CountryCodes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "AT",
                            CountryCode3Characters = "AUT",
                            CurrencyCode = "EUR",
                            DefaultCulture = "de-AT",
                            EntityStatus = 1,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = "BE",
                            CountryCode3Characters = "BEL",
                            CurrencyCode = "EUR",
                            DefaultCulture = "fr-BE",
                            EntityStatus = 1,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = "BG",
                            CountryCode3Characters = "BGR",
                            CurrencyCode = "BGN",
                            DefaultCulture = "bg-BG",
                            EntityStatus = 1,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = "HR",
                            CountryCode3Characters = "HRV",
                            CurrencyCode = "HRK",
                            DefaultCulture = "hr-HR",
                            EntityStatus = 1,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = "CY",
                            CountryCode3Characters = "CYP",
                            CurrencyCode = "EUR",
                            DefaultCulture = "el-CY",
                            EntityStatus = 1,
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = "CZ",
                            CountryCode3Characters = "CZE",
                            CurrencyCode = "CZK",
                            DefaultCulture = "cs-CZ",
                            EntityStatus = 1,
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = "DK",
                            CountryCode3Characters = "DNK",
                            CurrencyCode = "DKK",
                            DefaultCulture = "da-DK",
                            EntityStatus = 1,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = "EE",
                            CountryCode3Characters = "EST",
                            CurrencyCode = "EUR",
                            DefaultCulture = "et-EE",
                            EntityStatus = 1,
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = "FI",
                            CountryCode3Characters = "FIN",
                            CurrencyCode = "EUR",
                            DefaultCulture = "fi-FI",
                            EntityStatus = 1,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = "FR",
                            CountryCode3Characters = "FRA",
                            CurrencyCode = "EUR",
                            DefaultCulture = "fr-FR",
                            EntityStatus = 1,
                            Name = "France"
                        },
                        new
                        {
                            Id = "DE",
                            CountryCode3Characters = "DEU",
                            CurrencyCode = "EUR",
                            DefaultCulture = "de-DE",
                            EntityStatus = 1,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = "GR",
                            CountryCode3Characters = "GRC",
                            CurrencyCode = "EUR",
                            DefaultCulture = "el-GR",
                            EntityStatus = 1,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = "HU",
                            CountryCode3Characters = "HUN",
                            CurrencyCode = "HUF",
                            DefaultCulture = "hu-HU",
                            EntityStatus = 1,
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = "IS",
                            CountryCode3Characters = "ISL",
                            CurrencyCode = "ISK",
                            DefaultCulture = "is-IS",
                            EntityStatus = 1,
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = "IE",
                            CountryCode3Characters = "IRL",
                            CurrencyCode = "EUR",
                            DefaultCulture = "en-IE",
                            EntityStatus = 1,
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = "IT",
                            CountryCode3Characters = "ITA",
                            CurrencyCode = "EUR",
                            DefaultCulture = "it-IT",
                            EntityStatus = 1,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = "LV",
                            CountryCode3Characters = "LVA",
                            CurrencyCode = "EUR",
                            DefaultCulture = "lv-LV",
                            EntityStatus = 1,
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = "LT",
                            CountryCode3Characters = "LTU",
                            CurrencyCode = "EUR",
                            DefaultCulture = "lt-LT",
                            EntityStatus = 1,
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = "LI",
                            CountryCode3Characters = "LIE",
                            CurrencyCode = "CHF",
                            DefaultCulture = "de-LI",
                            EntityStatus = 1,
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = "LU",
                            CountryCode3Characters = "LUX",
                            CurrencyCode = "EUR",
                            DefaultCulture = "de-LU",
                            EntityStatus = 1,
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = "MT",
                            CountryCode3Characters = "MLT",
                            CurrencyCode = "EUR",
                            DefaultCulture = "mt-MT",
                            EntityStatus = 1,
                            Name = "Malta"
                        },
                        new
                        {
                            Id = "NL",
                            CountryCode3Characters = "NLD",
                            CurrencyCode = "EUR",
                            DefaultCulture = "nl-NL",
                            EntityStatus = 1,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = "NG",
                            CountryCode3Characters = "NGA",
                            CurrencyCode = "NGN",
                            DefaultCulture = "en-NG",
                            EntityStatus = 1,
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = "NO",
                            CountryCode3Characters = "NOR",
                            CurrencyCode = "NOK",
                            DefaultCulture = "nb-NO",
                            EntityStatus = 1,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = "PL",
                            CountryCode3Characters = "POL",
                            CurrencyCode = "PLN",
                            DefaultCulture = "pl-PL",
                            EntityStatus = 1,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = "PT",
                            CountryCode3Characters = "PRT",
                            CurrencyCode = "EUR",
                            DefaultCulture = "pt-PT",
                            EntityStatus = 1,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = "RO",
                            CountryCode3Characters = "ROU",
                            CurrencyCode = "RON",
                            DefaultCulture = "ro-RO",
                            EntityStatus = 1,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = "SK",
                            CountryCode3Characters = "SVK",
                            CurrencyCode = "EUR",
                            DefaultCulture = "sk-SK",
                            EntityStatus = 1,
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = "SI",
                            CountryCode3Characters = "SVN",
                            CurrencyCode = "EUR",
                            DefaultCulture = "sl-SI",
                            EntityStatus = 1,
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = "ES",
                            CountryCode3Characters = "ESP",
                            CurrencyCode = "EUR",
                            DefaultCulture = "es-ES",
                            EntityStatus = 1,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = "CH",
                            CountryCode3Characters = "CHE",
                            CurrencyCode = "CHF",
                            DefaultCulture = "de-CH",
                            EntityStatus = 1,
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = "SE",
                            CountryCode3Characters = "SWE",
                            CurrencyCode = "SEK",
                            DefaultCulture = "sv-SE",
                            EntityStatus = 1,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = "AE",
                            CountryCode3Characters = "ARE",
                            CurrencyCode = "AED",
                            DefaultCulture = "ar-AE",
                            EntityStatus = 1,
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = "GB",
                            CountryCode3Characters = "GBR",
                            CurrencyCode = "GBP",
                            DefaultCulture = "en-GB",
                            EntityStatus = 1,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = "US",
                            CountryCode3Characters = "USA",
                            CurrencyCode = "USD",
                            DefaultCulture = "en-US",
                            EntityStatus = 1,
                            Name = "United States"
                        });
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Integration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountDetailId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AuthenticationState")
                        .HasColumnType("int");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationProviderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IntegrationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar (50)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Integrations_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("Integrations", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.IntegrationAccountDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar (10)");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar (5)");

                    b.Property<string>("IntegrationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastCardDigits")
                        .HasColumnType("nvarchar (20)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar (10)");

                    b.Property<int>("UsageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationId")
                        .IsUnique()
                        .HasFilter("[IntegrationId] IS NOT NULL");

                    b.ToTable("IntegrationAccountDetails");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantAccountMetricSnapshot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("dbo.getId()");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IntegrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("MetricDate")
                        .HasColumnType("date");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("RefundCount")
                        .HasColumnType("int");

                    b.Property<int>("SaleCount")
                        .HasColumnType("int");

                    b.Property<long>("TotalRefunds")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSales")
                        .HasColumnType("bigint");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_MerchantAccountMetricSnapshots_Id");

                    b.HasIndex("Day", "Month", "Year", "EntityId", "AirslipUserType", "IntegrationId");

                    b.ToTable("MerchantAccountMetricSnapshots", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantMetricSnapshot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("dbo.getId()");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("MetricDate")
                        .HasColumnType("date");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("RefundCount")
                        .HasColumnType("int");

                    b.Property<int>("SaleCount")
                        .HasColumnType("int");

                    b.Property<long>("TotalRefunds")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSales")
                        .HasColumnType("bigint");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_MerchantMetricSnapshots_Id");

                    b.ToTable("MerchantMetricSnapshots", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DiscountAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("Ean")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManualUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantTransactionId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentTransactionProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Price")
                        .HasColumnType("bigint");

                    b.Property<long?>("PriceIncTax")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<double?>("QuantityRefunded")
                        .HasColumnType("float");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TaxPercent")
                        .HasColumnType("float");

                    b.Property<long?>("TaxValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaxValueAfterDiscount")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalRefund")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Upc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("WarrantyExpiryDateTime")
                        .HasColumnType("bigint");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<string>("WeightUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_MerchantProducts_Id");

                    b.HasIndex("MerchantTransactionId");

                    b.ToTable("MerchantProducts", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantRefund", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar (250)");

                    b.Property<long?>("Fee")
                        .HasColumnType("bigint");

                    b.Property<string>("MerchantTransactionId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Shipping")
                        .HasColumnType("bigint");

                    b.Property<long?>("Tax")
                        .HasColumnType("bigint");

                    b.Property<long?>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_MerchantRefunds_Id");

                    b.HasIndex("MerchantTransactionId");

                    b.ToTable("MerchantRefunds", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantRefundItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MerchantRefundId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Qty")
                        .HasColumnType("float");

                    b.Property<long?>("Refund")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionProductId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VariantId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_MerchantRefundItems_Id");

                    b.HasIndex("MerchantRefundId");

                    b.ToTable("MerchantRefundItems", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankStatementDescription")
                        .HasColumnType("nvarchar (150)");

                    b.Property<string>("BankStatementTransactionIdentifier")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar (5)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar (100)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar (150)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar (50)");

                    b.Property<bool?>("OnlinePurchase")
                        .HasColumnType("bit");

                    b.Property<string>("OperatorName")
                        .HasColumnType("nvarchar (100)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar (20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar (20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("RefundCode")
                        .HasColumnType("nvarchar (50)");

                    b.Property<long?>("ServiceCharge")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("Store")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("StoreAddress")
                        .HasColumnType("nvarchar (250)");

                    b.Property<string>("StoreLocationId")
                        .HasColumnType("nvarchar (50)");

                    b.Property<long?>("Subtotal")
                        .HasColumnType("bigint");

                    b.Property<string>("Till")
                        .HasColumnType("nvarchar (10)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar (10)");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<long?>("Total")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalRefund")
                        .HasColumnType("bigint");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_MerchantTransactions_Id");

                    b.HasIndex("AuditInformationId");

                    b.HasIndex("Day", "Month", "Year", "EntityId", "AirslipUserType");

                    b.HasIndex("Day", "Month", "Year", "EntityId", "AirslipUserType", "IntegrationId");

                    b.ToTable("MerchantTransactions", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.RelationshipDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Allowed")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerAirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("OwnerEntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasColumnType("nvarchar (50)");

                    b.Property<string>("RelationshipHeaderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ViewerAirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("ViewerEntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_RelationshipDetails_Id");

                    b.HasIndex("RelationshipHeaderId");

                    b.HasIndex("OwnerEntityId", "OwnerAirslipUserType", "ViewerEntityId", "ViewerAirslipUserType", "PermissionType", "Allowed");

                    b.ToTable("RelationshipDetails", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.RelationshipHeader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AirslipUserType")
                        .HasColumnType("int");

                    b.Property<string>("AuditInformationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DataSource")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_RelationshipHeaders_Id");

                    b.HasIndex("AuditInformationId");

                    b.ToTable("RelationshipHeaders", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Unmapped.DashboardMetricSnapshot", b =>
                {
                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime>("MetricDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToView(null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Unmapped.DebitsAndCreditsByYear", b =>
                {
                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<long>("TotalCredit")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDebit")
                        .HasColumnType("bigint");

                    b.ToView(null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Unmapped.RevenueAndRefundsByYear", b =>
                {
                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<long>("TotalRefunds")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSales")
                        .HasColumnType("bigint");

                    b.ToView(null);
                });

            modelBuilder.Entity("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_AuditInformation_Id");

                    b.ToTable("AuditInformation", (string)null);
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Bank", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankAccountBalance", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankCountryCode", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.Bank", "Bank")
                        .WithMany("CountryCodes")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankSyncRequest", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.BankTransaction", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithOne()
                        .HasForeignKey("Airslip.Analytics.Core.Entities.BankTransaction", "AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.CountryCode", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Integration", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.IntegrationAccountDetail", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.Integration", "Integration")
                        .WithOne("AccountDetail")
                        .HasForeignKey("Airslip.Analytics.Core.Entities.IntegrationAccountDetail", "IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Integration");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantProduct", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.MerchantTransaction", null)
                        .WithMany("Products")
                        .HasForeignKey("MerchantTransactionId");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantRefund", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.MerchantTransaction", null)
                        .WithMany("Refunds")
                        .HasForeignKey("MerchantTransactionId");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantRefundItem", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.MerchantRefund", null)
                        .WithMany("Items")
                        .HasForeignKey("MerchantRefundId");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantTransaction", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.RelationshipDetail", b =>
                {
                    b.HasOne("Airslip.Analytics.Core.Entities.RelationshipHeader", "RelationshipHeader")
                        .WithMany("Details")
                        .HasForeignKey("RelationshipHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelationshipHeader");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.RelationshipHeader", b =>
                {
                    b.HasOne("Airslip.Common.Repository.Types.Entities.BasicAuditInformation", "AuditInformation")
                        .WithMany()
                        .HasForeignKey("AuditInformationId");

                    b.Navigation("AuditInformation");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Bank", b =>
                {
                    b.Navigation("CountryCodes");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.Integration", b =>
                {
                    b.Navigation("AccountDetail");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantRefund", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.MerchantTransaction", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Airslip.Analytics.Core.Entities.RelationshipHeader", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
